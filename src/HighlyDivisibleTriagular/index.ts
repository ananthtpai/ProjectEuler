/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

function findPrimes(input: number) {
  const numArr = new Array(input + 1).fill(true)
  numArr[0] = numArr[1] = false
  for (let i = 2; i <= Math.sqrt(input); i++) {
    for (let j = 2; i * j <= input; j++) {
      numArr[i * j] = false
    }
  }
  return numArr.reduce((acc, val, ind) => {
    if (val) {
      return acc.concat(ind)
    } else {
      return acc
    }
  }, [])
}

function numberOfDivisors(input: number, primes: number[]) {
  let temp = input
  let total = 1
  for (let i = 0; i < primes.length; i++) {
    const prime = primes[i]
    let count = 0
    if (temp % prime === 0) {
      while (temp % prime === 0) {
        temp = temp / prime
        count++
      }
      total = total * (count + 1)
    }
  }
  return total
}

function sumNatural(n: number) {
  return (n * (n + 1)) / 2
}

export function solution(input: number) {
  let i = 1
  const primes = findPrimes(10000)
  while (numberOfDivisors(sumNatural(i), primes) < input) {
    i++
  }
  return sumNatural(i)
}

console.log(solution(500))
