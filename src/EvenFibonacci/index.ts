
/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
 * find the sum of the even-valued terms. */

function fibonacci (n: number):number {
  if (n === 0) {
    return 0
  } else if (n === 1) {
    return 1
  } else if (n === 2) {
    return 2
  }
  const fib = fibonacci(n - 1) + fibonacci(n - 2)
  return fib
}

function fibArray (n: number):number[] {
  if ( n === 0 ){
    return []
  } else if (n === 1) {
    return [1]
  } else if (n === 2) {
    return [1, 2]
  }
  return [ ...fibArray(n-1), fibonacci(n)]
}


export function solution (input: number) {
  let n = 0
  while (fibonacci(n) < input) {
    n++
  }
  let array = fibArray(n - 1)

  return array.reduce((accum, item) => {
    if (item % 2 === 0) {
      return accum = accum + item
    } else {
      return accum
    }
  }, 0)
}

console.log(solution(4000000))
